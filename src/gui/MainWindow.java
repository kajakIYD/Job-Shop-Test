/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package gui;


import core.CLPTask;
import core.Tuple;
import core.Tuple2;
import java.awt.BorderLayout;
import java.awt.GridLayout;
import java.time.ZonedDateTime;
import java.time.format.DateTimeFormatter;
import java.util.Date;
import java.util.Locale;
import javax.swing.JPanel;
import javax.swing.SwingUtilities;
import javax.swing.WindowConstants;
import org.jacop.core.Store;
import org.jfree.chart.ChartPanel;
//import org.jfree.ui.RefineryUtilities;


/**
 * Class defining all of the stuff that is present in MainWindow
 * @author PF
 * @version 1.0
 * @since   2018-01-03 
 */
public class MainWindow extends javax.swing.JFrame {

    //private MyChart chart;
    private XYIntervalBarChart chart;
    Date startDate;       
    
    int[][] Tab = new int[][]
        {
            {0,120,0,120,240,300,360},      // X
            {0,0,1,1,1,1,1},                // Y
            {120,300,120,120,60,60,60},     // task duration
            {0,1,0,0,2,2,2}                 // task type    
        };
    public void printText(String text)
    {
        jTextArea1.append(text + "\n");
    }
    
    public void drawGantt(int[][] result)
    {
//        SwingUtilities.invokeLater(() -> {
//         chart = new MyChart("Gantt Chart Example");
//         chart.setSize(800, 400);
//         chart.setLocationRelativeTo(null);
//         chart.setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE);
//         chart.setVisible(true);
//         //ganttChartPanel.add(chart);
//      });
        //ganttChartPanel.add(chart.createGanttChart(result));
    }
    
    /**
    * Getter for all values present in GUI  
    * @return tasksDurationsUserDefined, tasksQuantitiesUserDefined, numTasksKindsNumMachinesCumulativeLimitsInt, isCheckBoxSelected
    */   
    public Tuple<int[], int[], int[]> getGUIValues()
    {
        commitSpinnerEdits();
        
        int isCheckBoxSelected = (jCheckBoxEnergyOptimization.isSelected()) ? 1 : 0;
        
        int[] tasksDurationsUserDefined = new int[]{(int)(Integer)task1Duration.getValue(),
            (int)(Integer)task2Duration.getValue(), (int)(Integer)task3Duration.getValue(),
            (int)(Integer)task4Duration.getValue(), (int)(Integer)task5Duration.getValue()};
        int[] tasksQuantitiesUserDefined = new int[]{(int)(Integer)task1Quantity.getValue(),
            (int)(Integer)task2Quantity.getValue(), (int)(Integer)task3Quantity.getValue(),
            (int)(Integer)task4Quantity.getValue(), (int)(Integer)task5Quantity.getValue()};
        int[] numTasksKindsNumMachinesCumulativeLimitsInt =  new int[]{(Integer)numTasksKindsSpinner.getValue(),
            (Integer)numMachinesSpinner.getValue(), (Integer)cumulativeLimits1Spinner.getValue(),
        (Integer)cumulativeLimits2Spinner.getValue(), (Integer)cumulativeLimits3Spinner.getValue(),
        (Integer)cumulativeLimits4Spinner.getValue(), (Integer)cumulativeLimits5Spinner.getValue(), 
        isCheckBoxSelected};
        
        
        Tuple result = new Tuple(numTasksKindsNumMachinesCumulativeLimitsInt, tasksDurationsUserDefined,
                                tasksQuantitiesUserDefined);
        
        return result;
    }
    
    
    /**
     * Creates new form MainWindow
     */
    public MainWindow() {
        initComponents();
        getDate();
        //DrawCharts(Tab);
    }

    /**
    * Date getter from jSpinner
    */   
    private void getDate()
    {
        String input = jSpinner_date.getValue().toString();
        DateTimeFormatter f = DateTimeFormatter.ofPattern("EEE MMM dd HH:mm:ss zzz yyyy", Locale.ENGLISH);
        ZonedDateTime zdt = ZonedDateTime.parse( input , f );
        startDate = Date.from(zdt.toInstant());
    }
     
    /**
    * Method for drawing gantt-chart
    * @param Tab int[][] containing information about solution int[0][] - X; int[1][] - Y; int[2][] - duration;
    */   
    private void DrawCharts(int[][] Tab)
    {
        chart = new XYIntervalBarChart(Tab, startDate);
        ChartPanel panel1 = chart.GetPanel();
        JPanel.setLayout(new GridLayout(1,1));
        JPanel.add(panel1,BorderLayout.CENTER);
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jTabbedPane1 = new javax.swing.JTabbedPane();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        task1Quantity = new javax.swing.JSpinner();
        task2Quantity = new javax.swing.JSpinner();
        task3Quantity = new javax.swing.JSpinner();
        task4Quantity = new javax.swing.JSpinner();
        task5Quantity = new javax.swing.JSpinner();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        numTasksKindsSpinner = new javax.swing.JSpinner();
        task1Duration = new javax.swing.JSpinner();
        task2Duration = new javax.swing.JSpinner();
        task3Duration = new javax.swing.JSpinner();
        task4Duration = new javax.swing.JSpinner();
        task5Duration = new javax.swing.JSpinner();
        MakeScheduleButton = new javax.swing.JButton();
        jLabel7 = new javax.swing.JLabel();
        numMachinesSpinner = new javax.swing.JSpinner();
        jLabel8 = new javax.swing.JLabel();
        cumulativeLimits1Spinner = new javax.swing.JSpinner();
        jLabel9 = new javax.swing.JLabel();
        cumulativeLimits2Spinner = new javax.swing.JSpinner();
        jLabel10 = new javax.swing.JLabel();
        cumulativeLimits3Spinner = new javax.swing.JSpinner();
        jLabel11 = new javax.swing.JLabel();
        cumulativeLimits4Spinner = new javax.swing.JSpinner();
        jLabel12 = new javax.swing.JLabel();
        cumulativeLimits5Spinner = new javax.swing.JSpinner();
        jCheckBoxEnergyOptimization = new javax.swing.JCheckBox();
        jSpinner_date = new javax.swing.JSpinner();
        jLabel13 = new javax.swing.JLabel();
        JPanel = new javax.swing.JPanel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jTextArea1.setColumns(20);
        jTextArea1.setRows(5);
        jScrollPane1.setViewportView(jTextArea1);

        task1Quantity.setValue(2);

        task2Quantity.setValue(3);

        jLabel1.setText("Task1 Quantity & Duration");

        jLabel2.setText("Task2 Quantity & Duration");

        jLabel3.setText("Task3 Quantity & Duration");

        jLabel4.setText("Task4 Quantity & Duration");

        jLabel5.setText("Task5 Quantity & Duration");

        jLabel6.setText("Number of tasks kinds");

        numTasksKindsSpinner.setValue(2);

        task1Duration.setValue(10);

        task2Duration.setValue(5);

        MakeScheduleButton.setText("Make a schedule");
        MakeScheduleButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MakeScheduleButtonActionPerformed(evt);
            }
        });

        jLabel7.setText("Number of machines");

        numMachinesSpinner.setValue(2);

        jLabel8.setText("Cumulative limit - Task1");

        cumulativeLimits1Spinner.setValue(10);

        jLabel9.setText("Cumulative limit - Task2");

        cumulativeLimits2Spinner.setValue(10);

        jLabel10.setText("Cumulative limit - Task3");

        cumulativeLimits3Spinner.setValue(2);

        jLabel11.setText("Cumulative limit - Task4");

        cumulativeLimits4Spinner.setValue(2);

        jLabel12.setText("Cumulative limit - Task5");

        cumulativeLimits5Spinner.setValue(2);

        jCheckBoxEnergyOptimization.setText("Energy Optimization");

        jSpinner_date.setModel(new javax.swing.SpinnerDateModel());

        jLabel13.setText("Start date");

        javax.swing.GroupLayout JPanelLayout = new javax.swing.GroupLayout(JPanel);
        JPanel.setLayout(JPanelLayout);
        JPanelLayout.setHorizontalGroup(
            JPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
        JPanelLayout.setVerticalGroup(
            JPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 227, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(JPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGap(86, 86, 86))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 687, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel13)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jSpinner_date, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(29, 29, 29)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jLabel12)
                                        .addGap(49, 49, 49)
                                        .addComponent(cumulativeLimits5Spinner))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jLabel11)
                                        .addGap(49, 49, 49)
                                        .addComponent(cumulativeLimits4Spinner))
                                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                        .addComponent(jLabel10)
                                        .addGap(49, 49, 49)
                                        .addComponent(cumulativeLimits3Spinner))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jLabel9)
                                        .addGap(49, 49, 49)
                                        .addComponent(cumulativeLimits2Spinner))
                                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                        .addComponent(jLabel8)
                                        .addGap(49, 49, 49)
                                        .addComponent(cumulativeLimits1Spinner))
                                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                        .addComponent(jLabel6)
                                        .addGap(18, 18, 18)
                                        .addComponent(numTasksKindsSpinner))
                                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                        .addComponent(jLabel7)
                                        .addGap(26, 26, 26)
                                        .addComponent(numMachinesSpinner)))
                                .addGap(86, 86, 86))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jCheckBoxEnergyOptimization)
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                        .addComponent(MakeScheduleButton, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                .addComponent(jLabel1)
                                                .addComponent(jLabel4)
                                                .addComponent(jLabel5)
                                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                                    .addComponent(jLabel2, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                    .addComponent(jLabel3, javax.swing.GroupLayout.Alignment.LEADING)))
                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                .addComponent(task2Quantity, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addComponent(task1Quantity, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addComponent(task3Quantity, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addComponent(task4Quantity, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addComponent(task5Quantity, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE))
                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                .addComponent(task2Duration, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addComponent(task1Duration, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addComponent(task3Duration, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addComponent(task4Duration, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addComponent(task5Duration, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                                .addGap(75, 75, 75))))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel13)
                    .addComponent(jSpinner_date, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 10, Short.MAX_VALUE)
                .addComponent(JPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(task1Quantity, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel1))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(task2Quantity, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel2))
                                .addGap(9, 9, 9)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel3)
                                    .addComponent(task3Quantity, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(task4Quantity, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel4))
                                .addGap(9, 9, 9)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel5)
                                    .addComponent(task5Quantity, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel7)
                                    .addComponent(numMachinesSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(6, 6, 6)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel6)
                                    .addComponent(numTasksKindsSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel8)
                                    .addComponent(cumulativeLimits1Spinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel9)
                                    .addComponent(cumulativeLimits2Spinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(2, 2, 2)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel10)
                                    .addComponent(cumulativeLimits3Spinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel11)
                                    .addComponent(cumulativeLimits4Spinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel12)
                                    .addComponent(cumulativeLimits5Spinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(3, 3, 3)
                                .addComponent(jCheckBoxEnergyOptimization)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(task1Duration, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(task2Duration, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(9, 9, 9)
                                .addComponent(task3Duration, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(task4Duration, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(9, 9, 9)
                                .addComponent(task5Duration, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(18, 18, 18)
                        .addComponent(MakeScheduleButton))
                    .addComponent(jScrollPane1))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
    * Method that handles action after button click
    * @param evt event on button click
    */  
    private void MakeScheduleButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_MakeScheduleButtonActionPerformed
        // TODO add your handling code here:
        jTextArea1.setText("");
        Tuple<int[], int[], int[]> guiValues = getGUIValues();
        int[] cumulativeLimitInt = new int[]{guiValues.x[2], guiValues.x[3], 
                        guiValues.x[4], guiValues.x[5], guiValues.x[6]};
        CLPTask task = new CLPTask(guiValues.x[0], guiValues.y, guiValues.z,
                        guiValues.x[1], cumulativeLimitInt, guiValues.x[7]);
        
        printText("Start modeling...\n");
        task.model();
        
        printText("Start search...\n");
        Tuple<int[][], Store, String> result = task.search();
        if (result.x != null)
        {
            Tuple2 <int[][], Store> result2 = new Tuple2<int[][], Store>(result.x, result.y);
            String text = CLPTask.buildResultString(result2);
            text += "\n" + result.z;
            printText(text);
            drawGantt(result.x);
            JPanel.removeAll();
            DrawCharts(result.x);

            JPanel.updateUI();
            //JPanel.validate();
        }
        else
        {
            printText(result.y.toString() + "\nNo solution found");
        }
        task.equals(null);
    }//GEN-LAST:event_MakeScheduleButtonActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MainWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MainWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MainWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MainWindow().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel JPanel;
    private javax.swing.JButton MakeScheduleButton;
    private javax.swing.JSpinner cumulativeLimits1Spinner;
    private javax.swing.JSpinner cumulativeLimits2Spinner;
    private javax.swing.JSpinner cumulativeLimits3Spinner;
    private javax.swing.JSpinner cumulativeLimits4Spinner;
    private javax.swing.JSpinner cumulativeLimits5Spinner;
    private javax.swing.JCheckBox jCheckBoxEnergyOptimization;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JSpinner jSpinner_date;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JTextArea jTextArea1;
    private javax.swing.JSpinner numMachinesSpinner;
    private javax.swing.JSpinner numTasksKindsSpinner;
    private javax.swing.JSpinner task1Duration;
    private javax.swing.JSpinner task1Quantity;
    private javax.swing.JSpinner task2Duration;
    private javax.swing.JSpinner task2Quantity;
    private javax.swing.JSpinner task3Duration;
    private javax.swing.JSpinner task3Quantity;
    private javax.swing.JSpinner task4Duration;
    private javax.swing.JSpinner task4Quantity;
    private javax.swing.JSpinner task5Duration;
    private javax.swing.JSpinner task5Quantity;
    // End of variables declaration//GEN-END:variables

    /**
    * Method that commits spinner values on GUI
    */
    private void commitSpinnerEdits() {
        javax.swing.JSpinner[] spinnerList = new javax.swing.JSpinner[]
        {numTasksKindsSpinner,
        numMachinesSpinner,
        task1Duration,
        task1Quantity,
        task2Duration,
        task2Quantity,
        task3Duration,
        task3Quantity,
        task4Duration,
        task4Quantity,
        task5Duration,
        task5Quantity};
        
        for (javax.swing.JSpinner spinner : spinnerList)
        {
            try
            {
                spinner.commitEdit();
            }
            catch ( java.text.ParseException e )
            {
                System.out.println("*******************************************"
                        + "gui.MainWindow.commitSpinnerEdits() - "
                        + "exeption thrown while commiting edits on spinners"
                        + "*********************************************");               
            }
        }
    }
}
